namespace suffix_array {
	const int MAX_N = 100010;
	int RA[MAX_N], tempRA[MAX_N], SA[MAX_N], tempSA[MAX_N], c[MAX_N], Phi[MAX_N], PLCP[MAX_N], LCP[MAX_N];
	int n;
	string T;

	void counting_sort(int k) {
		int sum, maxi = max(300, n);
		memset(c, 0, sizeof c);
		for (int i = 0; i < n; i++) {
			c[i + k < n ? RA[i + k] : 0]++;
		}
		for (int i = sum = 0; i < maxi; i++) {
			int t = c[i];
			c[i] = sum;
			sum += t;
		}
		for (int i = 0; i < n; i++) {
			tempSA[c[SA[i] + k < n ? RA[SA[i] + k] : 0]++] = SA[i];
		}
		for (int i = 0; i < n; i++) {
			SA[i] = tempSA[i];
		}
	}

	void build() {
		int r;
		for (int i = 0; i < n; i++) RA[i] = (int)T[i];
		for (int i = 0; i < n; i++) SA[i] = i;
		for (int k = 1; k < n; k <<= 1) {
			counting_sort(k);
			counting_sort(0);
			tempRA[SA[0]] = r = 0;
			for (int i = 1; i < n; i++) {
				tempRA[SA[i]] = (RA[SA[i]] == RA[SA[i - 1]] && RA[SA[i] + k] == RA[SA[i - 1] + k]) ? r : ++r;
			}
			for (int i = 0; i < n; i++) {
				RA[i] = tempRA[i];
			}
			if (RA[SA[n - 1]] == n - 1) {
				break;
			}
		}
	}

	void build_lcp() {
		int i, L;
		Phi[SA[0]] = -1;
		for (i = 1; i < n; i++) {
			Phi[SA[i]] = SA[i - 1];
		}
		for (i = L = 0; i < n; i++) {
			if (Phi[i] == -1) {
				PLCP[i] = 0; 
				continue;
			}
			while (T[i + L] == T[Phi[i] + L]) L++;
			PLCP[i] = L;
			L = max(L - 1, 0);
		}
		for (int i = 0; i < n; i++) {
			LCP[i] = PLCP[SA[i]];
		}
	}

	void init(string &ss) {
		T = ss;
		n = (int)ss.size();
		build();
		build_lcp();
		//for (int i = 0; i < n; i++) {
		//	int tmp = SA[i];
		//	cerr << i << ' ' << T.substr(tmp) << endl;
		//}
		//getchar();
	}
};
