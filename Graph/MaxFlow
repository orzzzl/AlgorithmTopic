typedef int F;
#define inf (1<<29)
#define MAXV 610
#define MAXE 200000 // E*2!

F cap[MAXE], flow[MAXE];
int to[MAXE];
int previous[MAXE], last[MAXV], used[MAXV], level[MAXV];

struct MaxFlow {
	int V, E;

	MaxFlow(int n) {
		int i;
		V = n; E = 0;
		REP(i, V) last[i] = -1;
	}

	void add_edge(int x, int y, F f) {
		cap[E] = f; flow[E] = 0; to[E] = y; previous[E] = last[x]; last[x] = E; E++;
		cap[E] = 0; flow[E] = 0; to[E] = x; previous[E] = last[y]; last[y] = E; E++;
	}

	bool bfs(int s, int t) {
		int i;
		REP(i, V) level[i] = -1;
		queue <int> q;
		q.push(s); level[s] = 0;
		while (!q.empty()) {
			int x = q.front(); q.pop();
			for (i = last[x]; i >= 0; i = previous[i]) if (level[to[i]] == -1 && cap[i] > flow[i]) { q.push(to[i]); level[to[i]] = level[x] + 1; }
		}
		return (level[t] != -1);
	}

	F dfs(int v, int t, F f) {
		int i;
		if (v == t) return f;
		for (i = used[v]; i >= 0; used[v] = i = previous[i]) if (level[to[i]] > level[v] && cap[i] > flow[i]) {
			F tmp = dfs(to[i], t, min(f, cap[i] - flow[i]));
			if (tmp > 0) { flow[i] += tmp; flow[i ^ 1] -= tmp; return tmp; }
		}
		return 0;
	}

	vector <pair <int, int> > positive_edges(void) {
		int i, j;
		vector <pair <int, int> > ans;
		REP(i, V) for (j = last[i]; j >= 0; j = previous[j]) if (flow[j] > 0) ans.push_back(make_pair(i, to[j]));
		return ans;
	}

	F maxflow(int s, int t) {
		int i;
		while (bfs(s, t)) {
			REP(i, V) used[i] = last[i];
			while (dfs(s, t, inf) != 0);
		}
		F ans = 0;
		for (i = last[s]; i >= 0; i = previous[i]) {
			ans += flow[i];
		}
		return ans;
	}

};
