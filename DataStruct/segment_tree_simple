const int mx = 100005;
char s[mx];
int N, M;

struct seg {
	int start, end;
	seg() {

	}
};

inline seg merge(const seg &lft, const seg &rgt) {
	seg ret;

	return ret;
}

seg x[4 * mx];

void build(int pos, int start, int end) {
	if (start > end) return;
	if (start == end) {
		// do something
	}
	else {
		int mid = start + (end - start) / 2;
		build(pos * 2, start, mid);
		build(pos * 2 + 1, mid + 1, end);
		x[pos] = merge(x[pos * 2], x[pos * 2 + 1]);
	}
	x[pos].start = start;
	x[pos].end = end;
}

void modify(int pos, int idx, int val) {
	int seg_start = x[pos].start, seg_end = x[pos].end;

	//invalid input
	if (idx < seg_start || idx > seg_end) return;

	// found
	if (idx == seg_start && idx == seg_end) {
		// do something here
		return;
	}
	int mid = (seg_start + seg_end) / 2;
	if (idx <= mid) modify(pos * 2, idx, val);
	if (idx > mid) modify(pos * 2 + 1, idx, val);
	x[pos] = merge(x[pos * 2], x[pos * 2 + 1]);
}

seg query(int pos, int start, int end) {
	int seg_start = x[pos].start, seg_end = x[pos].end;

	//invalid input
	if (start > end || end < seg_start || start > seg_end) return seg();

	// found
	if (start == seg_start && end == seg_end) return x[pos];

	int mid = (seg_start + seg_end) / 2;
	if (mid >= end) return query(pos * 2, start, end); // go left
	else if (mid < start) return query(pos * 2 + 1, start, end); // go right
	else return merge(query(pos * 2, start, mid), query(pos * 2 + 1, mid + 1, end)); // go both and merge
}
