const int mx = 1000005;
string s;
int N;

struct seg {
    int start, end;
};

seg merge(const seg &lft, const seg &rgt) {
}

seg x[4 * mx];

void build(int pos, int start, int end) {
    if (start > end) return;
    if (start == end) {
        if (s[start - 1] == ')') {
            x[pos] = seg(0, 0, 1);
        } else {
            x[pos] = seg(0, 1, 0);
        }
    } else {
        int mid = start + (end - start) / 2;
        build(pos * 2, start, mid);
        build(pos * 2 + 1, mid + 1, end);
        x[pos] = merge(x[pos * 2], x[pos * 2 + 1]);
    }
    x[pos].start = start;
    x[pos].end = end;
}

seg query(int pos, int start, int end) {
    int seg_start = x[pos].start, seg_end = x[pos].end;

    //invalid input
    if (start > end or end < seg_start or start > seg_end) return seg(0, 0, 0);

    // found
    if (start == seg_start and end == seg_end) return x[pos];
    
    int mid = (seg_start + seg_end) / 2;
    if (mid >= end) return query(pos * 2, start, end); // go left
    else if (mid < start) return query(pos * 2 + 1, start, end); // go right
    else return merge(query(pos * 2, start, mid), query(pos * 2 + 1, mid + 1, end)); // go both and merge
}

