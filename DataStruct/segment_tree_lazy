const int mx = 1000005;
int N, Q;

struct seg {
	int start, end;
	int put;
	seg() {
		start = end = -1;
		put = 0;
	}
	seg() {
		start = -1;
		end = -1;
		put = 0;
	}
};

inline seg merge(const seg &lft, const seg &rgt) {
}

seg x[4 * mx];

void build(int pos, int start, int end) {
	if (start > end) return;
	if (start == end) {
		// do something
	}
	else {
		int mid = start + (end - start) / 2;
		build(pos * 2, start, mid);
		build(pos * 2 + 1, mid + 1, end);
		x[pos] = merge(x[pos * 2], x[pos * 2 + 1]);
		x[pos].put = 0;
	}
	x[pos].start = start;
	x[pos].end = end;
}

inline void update(int pos, ll v) {
	ll num = x[pos].end - x[pos].start + 1;
	x[pos].sum += num * (ll)v;
	x[pos].put += (ll)v;
}


inline void push(ll pos) {
	if (x[pos].put) {
		//do something
		update(pos * 2, x[pos].put);
		update(pos * 2 + 1, x[pos].put);
		x[pos].put = 0;
	}
}

void modify(int pos, int start, int end) {
	if (x[pos].end < start || x[pos].start > end) return;
	if (x[pos].start >= start && x[pos].end <= end) {
		update(pos, v);
		return;
	}
	push(pos);
	int mid = x[pos].start + (x[pos].end - x[pos].start) / 2;
	if (mid >= end) modify(pos * 2, start, end);
	else if (mid < start) modify(pos * 2 + 1, start, end);
	else if (mid >= start && mid < end) {
		modify(pos * 2, start, mid);
		modify(pos * 2 + 1, mid + 1, end);
	}
	x[pos] = merge(x[pos * 2], x[pos * 2 + 1]);
}

seg query(int pos, int start, int end) {
	int seg_start = x[pos].start, seg_end = x[pos].end;

	//invalid input
	if (start > end || end < seg_start || start > seg_end) return seg(0, 0);

	// found
	if (start <= seg_start && end >= seg_end) return x[pos];
	push(pos);
	int mid = seg_start + (seg_end - seg_start) / 2;
	if (mid >= end) return query(pos * 2, start, end); // go left
	else if (mid < start) return query(pos * 2 + 1, start, end); // go right
	else return merge(query(pos * 2, start, mid), query(pos * 2 + 1, mid + 1, end)); // go both and merge
}


